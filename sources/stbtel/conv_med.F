      MODULE CONV_MED
      CONTAINS
!                       *****************
                        SUBROUTINE READ_MED
!                       *****************
     &(MEDFILE,FAMFILE)
!
!***********************************************************************
! STBTEL   V6P1                                   11/07/2011
!***********************************************************************
!
!BRIEF    READS A FILE OF MED FORMAT AND FILL THE MESH OBJECT
!
!HISTORY  Y.AUDOUIN (EDF)
!+        11/07/2011
!+        V6P1
!+   CREATION OF THE FILE
!
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!| MEDFILE        |-->| NAME OF THE MED FILE IN THE TEMPORARY FOLDER
!| FAMFILE        |-->| NAME OF THE BOUNDARY FILE IN THE TEMPORARY FOLDER
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!
      USE DECLARATIONS_STBTEL
!
      USE DECLARATIONS_SPECIAL
      IMPLICIT NONE
      ! LANGAE AND OUTPUT VALUE
!
!+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
!
      CHARACTER(LEN=MAXLENHARD), INTENT(IN) :: MEDFILE
      CHARACTER(LEN=MAXLENHARD), INTENT(IN) :: FAMFILE

!
!+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
!
#if defined(HAVE_MED)
      INTEGER :: IERR,ITIME,IVAR
      INTEGER :: NMAA,MTYPE
      INTEGER :: PROFIL(1)
      INTEGER :: I,J,K,IPTFR
      INTEGER :: TYPENT,TYPGEO,TYPE1,TYPREP
      INTEGER :: NGAUSS,NUMDT,NUMO,NVAL,NCOMP
      DOUBLE PRECISION, ALLOCATABLE :: COOR(:)
      DOUBLE PRECISION :: TIME, DDUM
      LOGICAL :: LOCAL
      CHARACTER(LEN=SNAME_SIZE) :: DTUNIT
      CHARACTER(LEN=SNAME_SIZE), ALLOCATABLE :: NAMEVAR2(:), UNITVAR2(:)
      CHARACTER(LEN=NAME_SIZE) :: FIELDNAME
      INTEGER, ALLOCATABLE :: NUFANO(:)
      INTEGER :: IDUM, NVAR_MED
      CHARACTER :: CDUM
      CHARACTER(LEN=NAME_SIZE) :: MESHNAME,MESHNAME2
      LOGICAL :: FIRST,LDUM
      DOUBLE PRECISION, ALLOCATABLE :: VAL(:)
      INTEGER, ALLOCATABLE :: CON(:)
      CHARACTER(LEN=COMMENT_SIZE) :: ATTDESCR
      INTEGER :: NUM
      INTEGER :: TYPGEO2
      DOUBLE PRECISION, ALLOCATABLE :: RES(:)
      CHARACTER(LEN=SNAME_SIZE), ALLOCATABLE :: ELEMNAME(:)
      INTEGER, ALLOCATABLE :: ELEMNUM(:)
      INTEGER, ALLOCATABLE :: ELEMNUM2(:)
      LOGICAL :: MYFALSE
      INTEGER :: POS
      INTEGER :: DT, IT
!
      WRITE(LU,*) '----------------------------------------------------'
      IF(LNG.EQ.1) WRITE(LU,*) '------BEGINNING READING OF MED FILE'
      IF(LNG.EQ.2) WRITE(LU,*) '------DEBUT LECTURE DU FICHIER MED'
      WRITE(LU,*) '----------------------------------------------------'
!
!-----------------------------------------------------------------------
!
      CALL MFIOPE(NINP, MEDFILE, MED_ACC_RDONLY, IERR)
      CALL FNCT_CHECK(IERR,'MFIOPE')
!
      ! READING THE NUMBER OF MESH IN THE FILE
      CALL MMHNMH(NINP,NMAA,IERR)
      CALL FNCT_CHECK(IERR,'MMHNMH')
      IF(LNG.EQ.1) WRITE(LU,*) '---INFORMATIONS SUR LE MAILLAGE'
      IF(LNG.EQ.2) WRITE(LU,*) '---MESH INFORMATIONS'
      ! THERE IS SUPPOSED TO BE ONLY ONE MESH
      IF (NMAA .EQ. 1) THEN
        ! RADING THE NUMBER OF AXIS
        CALL MMHNAX(NINP,1,MESH2%NDIM,IERR)
        CALL FNCT_CHECK(IERR,"MMHNAX")
        ALLOCATE(MESH2%NAMECOO(MESH2%NDIM),STAT=IERR)
        CALL FNCT_CHECK(IERR,'ALLOCATE MESH2%NAMECOO')
        ALLOCATE(MESH2%UNITCOO(MESH2%NDIM),STAT=IERR)
        CALL FNCT_CHECK(IERR,'ALLOCATE MESH2%UNITCOO')
        ! READING MESH INFORMATIONS
        CALL MMHMII(NINP,1,MESHNAME,MESH2%NDIM,IDUM,MTYPE,
     &              MESH2%DESCRIPTION,DTUNIT,IDUM,IDUM,
     &              IDUM,MESH2%NAMECOO,MESH2%UNITCOO,IERR)
        CALL FNCT_CHECK(IERR,'MMHMII')
        IF(MESHNAME.EQ.'MESH') THEN
          MESH2%TITLE = MESH2%DESCRIPTION(1:72)
          MESH2%DESCRIPTION = 'NO DESCRIPTION'
        ELSE
          MESH2%TITLE = MESHNAME
        ENDIF
      ELSE
        IF(LNG.EQ.1) WRITE(LU,*) 'ERREUR : NOMBRE DE MAILLAGE ',
     &                           'DIFFERENT DE 1'
        IF(LNG.EQ.2) WRITE(LU,*) 'ERROR: NUMBER OF MESH DIFFERENT TO 1'
        CALL PLANTE(1)
      END IF
      ! READING THE NUMBER OF ELEMENTS
      CALL MED_GET_NELEM(MESHNAME,TYPGEO)
      CALL MED_GET_NELEM_BND(MESHNAME,TYPGEO2)
!
      IF(DEBUG.AND.(LNG.EQ.1)) WRITE(LU,*)
     &        'NOM DU MAILLAGE : ',MESH2%TITLE
      IF(DEBUG.AND.(LNG.EQ.2)) WRITE(LU,*) 'MESH NAME: ',MESH2%TITLE
      IF(DEBUG) WRITE(LU,*) 'NDIM :',MESH2%NDIM
      IF(DEBUG.AND.(LNG.EQ.1)) WRITE(LU,*) 'NOM DE COO: ',
     &                        MESH2%NAMECOO
      IF(DEBUG.AND.(LNG.EQ.1)) WRITE(LU,*) 'UNITE DE COO: ',
     &                        MESH2%UNITCOO
      IF(DEBUG.AND.(LNG.EQ.2)) WRITE(LU,*) 'NAME OF COO: ',
     &                                      MESH2%NAMECOO
      IF(DEBUG.AND.(LNG.EQ.2)) WRITE(LU,*) 'UNIT OF COO: ',
     &                        MESH2%UNITCOO
      IF(DEBUG) WRITE(LU,*) 'NELEM :',MESH2%NELEM
      IF(MESH2%NELEM2.NE.0.AND.DEBUG) WRITE(LU,*)'NELEM2 :',MESH2%NELEM2
      ! READING THE NUMBER OF NODES
      CALL MMHNME(NINP,MESHNAME,MED_NO_DT,MED_NO_IT,MED_NODE,MED_NONE,
     &            MED_COORDINATE,MED_NODAL,IDUM,IDUM,MESH2%NPOIN,IERR)
      CALL FNCT_CHECK(IERR,'MMHNME')
      IF(DEBUG) WRITE(LU,*) 'NPOIN :',MESH2%NPOIN
!
      IF(LNG.EQ.1) WRITE(LU,*) '---INFORMATION SUR LES FAMILLES'
      IF(LNG.EQ.2) WRITE(LU,*) '---FAMILY INFORMATION'
      CALL MFANFA(NINP,MESHNAME,MESH2%NFAM,IERR)
      CALL FNCT_CHECK(IERR,'MFANFA')
      IF(DEBUG.AND.(LNG.EQ.1)) WRITE(LU,*) 'NOMBRE DE FAMILLES :',
     &                        MESH2%NFAM
      IF(DEBUG.AND.(LNG.EQ.2)) WRITE(LU,*) 'NUMBER OF FAMILIES:',
     &                        MESH2%NFAM
      IF(MESH2%NFAM .EQ. 0) THEN
        IF(LNG.EQ.1) WRITE(LU,*) 'PAS DE FAMILLES'
        IF(LNG.EQ.2) WRITE(LU,*) 'NO FAMILIES'
      ELSE
        ! READING FAMILIES INFORMATIONS
        ALLOCATE(MESH2%IDFAM(MESH2%NFAM),STAT=IERR)
        CALL FNCT_CHECK(IERR,'ALLOCATE MESH2%IDFAM')
        ALLOCATE(MESH2%NAMEFAM(MESH2%NFAM),STAT=IERR)
        CALL FNCT_CHECK(IERR,'ALLOCATE MESH2%NAMEFAM')
        ALLOCATE(MESH2%VALFAM(MESH2%NFAM),STAT=IERR)
        CALL FNCT_CHECK(IERR,'ALLOCATE MESH2%VALFAM')
        ALLOCATE(MESH2%NGROUPFAM(MESH2%NFAM),STAT=IERR)
        CALL FNCT_CHECK(IERR,'ALLOCATE MESH2%NGROUPFAM')
        ALLOCATE(MESH2%GROUPFAM(MESH2%NFAM,10),STAT=IERR)
        CALL FNCT_CHECK(IERR,'ALLOCATE MESH2%GROUPFAM')
        MESH2%GROUPFAM(:,:) = ' '
        MESH2%NGROUPFAM = 0
        DO I=1,MESH2%NFAM
          CALL MFANFG(NINP,MESHNAME,I,MESH2%NGROUPFAM(I),IERR)
          CALL FNCT_CHECK(IERR,'MFANFG')
          IF(MESH2%NGROUPFAM(I).EQ.0) THEN
            CALL MFAFAI(NINP,MESHNAME,I,MESH2%NAMEFAM(I),MESH2%IDFAM(I),
     &                  MESH2%GROUPFAM(I,1),IERR)
          ELSE
            CALL MFAFAI(NINP,MESHNAME,I,MESH2%NAMEFAM(I),MESH2%IDFAM(I),
     &                  MESH2%GROUPFAM(I,1:MESH2%NGROUPFAM(I)),IERR)
          ENDIF
          CALL FNCT_CHECK(IERR,'MFAFAI')
          ! IDENTIFYING COLOR VALUE FROM NAME
          POS = INDEX(MESH2%NAMEFAM(I),':')
          IF (POS.EQ.0) THEN
            MESH2%VALFAM(I) = 0
          ELSE
            IF (MESH2%NAMEFAM(I)(POS-2:POS-2).EQ.'_') THEN
              READ(MESH2%NAMEFAM(I)(POS-1:POS-1),'(I1)') MESH2%VALFAM(I)
            ELSE IF(MESH2%NAMEFAM(I)(POS-3:POS-3).EQ.'_') THEN
              READ(MESH2%NAMEFAM(I)(POS-2:POS-1),'(I2)') MESH2%VALFAM(I)
            ELSE IF(MESH2%NAMEFAM(I)(POS-4:POS-4).EQ.'_') THEN
              READ(MESH2%NAMEFAM(I)(POS-3:POS-1),'(I3)') MESH2%VALFAM(I)
            ELSE
              WRITE(LU,*) 'INCORRECT NUMBER OF COLOR'
            ENDIF
          ENDIF
          IF(DEBUG) WRITE(LU,*) 'NAMEFAM : ',MESH2%NAMEFAM(I)
          IF(DEBUG) WRITE(LU,*) 'VALFAM : ',MESH2%VALFAM(I)
          IF(DEBUG) WRITE(LU,*) 'IDFAM : ',MESH2%IDFAM(I)
          IF(DEBUG) WRITE(LU,*) 'NGROUP : ',MESH2%NGROUPFAM(I)
          IF(MESH2%NGROUPFAM(I).NE.0) THEN
            DO J=1,MESH2%NGROUPFAM(I)
              IF(DEBUG) WRITE(LU,*) 'GROUP : ',TRIM(MESH2%GROUPFAM(I,J))
            ENDDO
          ENDIF
        ENDDO
      ENDIF
!
      ! READING THE COORDINATES
      ALLOCATE(MESH2%X(MESH2%NPOIN),STAT=IERR)
      CALL FNCT_CHECK(IERR,'ALLOCATE MESH2%X')
      ALLOCATE(MESH2%Y(MESH2%NPOIN),STAT=IERR)
      CALL FNCT_CHECK(IERR,'ALLOCATE MESH2%Y')
      IF(MESH2%NDIM.EQ.3) THEN
        ALLOCATE(MESH2%Z(MESH2%NPOIN),STAT=IERR)
        CALL FNCT_CHECK(IERR,'ALLOCATE MESH2%Z')
      ENDIF
      ! REDING THE COORDINATES
      ! Setting to 3 dimension in case the mesh is defined in 3d but contains a 2d mesh
      ! this will make a segfault at the deallocate
      ALLOCATE(COOR(MESH2%NPOIN*3),STAT=IERR)
      CALL FNCT_CHECK(IERR,'ALLOCATE COOR')

      CALL MMHCOR(NINP,TRIM(MESHNAME),MED_NO_DT,MED_NO_IT,
     &            MED_NO_INTERLACE,COOR,IERR)
      CALL FNCT_CHECK(IERR,'MMHCOR')
      DO I=1,MESH2%NPOIN
        MESH2%X(I) = COOR(I+0*MESH2%NPOIN)
        MESH2%Y(I) = COOR(I+1*MESH2%NPOIN)
        IF(MESH2%NDIM.EQ.3) THEN
          MESH2%Z(I) = COOR(I+2*MESH2%NPOIN)
        ENDIF
      ENDDO
      DEALLOCATE(COOR)
!
      ! READING IKLE
      ALLOCATE(MESH2%IKLES(MESH2%NELEM*MESH2%NDP),STAT=IERR)
      CALL FNCT_CHECK(IERR,'ALLOCATE MESH2%IKLES')
      ALLOCATE(CON(MESH2%NELEM*MESH2%NDP),STAT=IERR)
      CALL FNCT_CHECK(IERR,'ALLOCATE CON')
      ALLOCATE(ELEMNAME(MESH2%NELEM),STAT=IERR)
      CALL FNCT_CHECK(IERR,'ALLOCATE ELEMNAME')
      ALLOCATE(ELEMNUM(MESH2%NELEM),STAT=IERR)
      CALL FNCT_CHECK(IERR,'ALLOCATE ELEMNUM')
      MYFALSE = .FALSE.
      CALL MMHELR(NINP,MESHNAME,MED_NO_DT,MED_NO_IT,MED_CELL,
     &            TYPGEO,MED_NODAL,MED_NO_INTERLACE,CON,MYFALSE,
     &            ELEMNAME,MYFALSE,ELEMNUM,MYFALSE,ELEMNUM,IERR)
      CALL FNCT_CHECK(IERR,'MMHELR')
      DEALLOCATE(ELEMNAME,ELEMNUM)
      ! CONVERTING IKLE INTO IKLES
      DO I=1,MESH2%NELEM
        DO J=1,MESH2%NDP
          MESH2%IKLES((I-1)*MESH2%NDP+J) = CON(I+(J-1)*MESH2%NELEM)
        ENDDO
      ENDDO
      DEALLOCATE(CON)
      ! READING IKLES2 IF NECESSARY
      IF(MESH2%NELEM2.NE.0) THEN
        ! READING IKLE2
        ALLOCATE(MESH2%IKLES2(MESH2%NELEM2*MESH2%NDP2),STAT=IERR)
        CALL FNCT_CHECK(IERR,'ALLOCATE MESH2%IKLES2')
        ALLOCATE(CON(MESH2%NELEM2*MESH2%NDP2),STAT=IERR)
        CALL FNCT_CHECK(IERR,'ALLOCATE CON BIS')
        ALLOCATE(ELEMNAME(MESH2%NELEM2),STAT=IERR)
        CALL FNCT_CHECK(IERR,'ALLOCATE ELEMNAME')
        ALLOCATE(ELEMNUM(MESH2%NELEM2),STAT=IERR)
        CALL FNCT_CHECK(IERR,'ALLOCATE ELEMNUM')
        CALL MMHELR(NINP,MESHNAME,MED_NO_DT,MED_NO_IT,MED_CELL,
     &              TYPGEO2,MED_NODAL,MED_NO_INTERLACE,CON,MYFALSE,
     &              ELEMNAME,MYFALSE,ELEMNUM,MYFALSE,ELEMNUM,IERR)
        CALL FNCT_CHECK(IERR,'MMHELR TYPE2')
        ! CONVERTING IKLE2 INTO IKLES2
        DO I=1,MESH2%NELEM2
          DO J=1,MESH2%NDP2
            MESH2%IKLES2((I-1)*MESH2%NDP2+J) = CON(I+(J-1)*MESH2%NELEM2)
          ENDDO
        ENDDO
        DEALLOCATE(CON)
      ENDIF
!
      ! READING GLOBAL NUMBERING IF AVAILABLE
      ALLOCATE(MESH2%KNOLG(MESH2%NPOIN),STAT=IERR)
      CALL FNCT_CHECK(IERR,"ALLOCATE MESH2%KNOLG")
      MESH2%KNOLG = 0
      CALL MMHGNR(NINP,MESHNAME,MED_NO_DT,MED_NO_IT,MED_NODE,
     &            MED_NONE,MESH2%KNOLG,IERR)
!
      IF(LNG.EQ.1) WRITE(LU,*)
     &            '---INFORMATIONS SUR LES CONDITIONS LIMITES'
      IF(LNG.EQ.2) WRITE(LU,*) '---BOUNDARY INFORMATIONS'
      IF(SRF_BND) THEN
        CALL MED_BUILD_BND_HYDRO(FAMFILE,MESHNAME,TYPGEO,TYPGEO2)
      ELSE
        CALL MED_BUILD_BND(FAMFILE,MESHNAME,TYPGEO,TYPGEO2)
      ENDIF
!
      IF(LNG.EQ.1) WRITE(LU,*) '---INFORMATIONS SUR LES RESULTATS'
      IF(LNG.EQ.2) WRITE(LU,*) '---RESULTS INFORMATIONS'
      ! READING THE VARIABLES
      ! WE NEED TO CREATE A VARIABLE FOR EACH COMPONENENT
      ! SO WE HAVE TO COUNT THE NUMBER OF COMPONENT FOR EACH FIELD
      CALL MFDNFD(NINP,NVAR_MED,IERR)
      CALL FNCT_CHECK(IERR,'MFDNFD')
      IF(DEBUG.AND.(LNG.EQ.1)) WRITE(LU,*) 'NOMBRE DE VARIABLE MED :',
     &            NVAR_MED
      IF(DEBUG.AND.(LNG.EQ.2)) WRITE(LU,*) 'NUMBER OF MED VARAIBLE:',
     &            NVAR_MED
      MESH2%NVAR = 0
      DO I=1,NVAR_MED
        CALL MFDNFC(NINP,I,NCOMP,IERR)
        CALL FNCT_CHECK(IERR,'MFDNFC')
        ALLOCATE(NAMEVAR2(NCOMP),STAT=IERR)
        CALL FNCT_CHECK(IERR,'ALLOCATE NAMEVAR2')
        ALLOCATE(UNITVAR2(NCOMP),STAT=IERR)
        CALL FNCT_CHECK(IERR,'ALLOCATE UNITVAR2')
        DTUNIT = ""
        CALL MFDFDI(NINP,I,FIELDNAME,MESHNAME2,IDUM,IDUM,NAMEVAR2,
     &              UNITVAR2,DTUNIT,IDUM,IERR)
        CALL FNCT_CHECK(IERR,'MFDFDI')
        ! REMOVE THE MODIF FIELD FROM THE COUNT OR
        ! IT WOULD DOUBLE THE NUMBER OF VARIABLES
        DEALLOCATE(NAMEVAR2,UNITVAR2)
        IF (FIELDNAME(1:11).EQ.'MODIF_FIELD') CYCLE
        MESH2%NVAR = MESH2%NVAR + NCOMP
      ENDDO
      IF(DEBUG.AND.(LNG.EQ.1)) WRITE(LU,*) 'NOMBRE DE VARIABLES :',
     &                  MESH2%NVAR
      IF(DEBUG.AND.(LNG.EQ.2)) WRITE(LU,*) 'NUMBER OF VARIABLES:',
     &                  MESH2%NVAR
      IF(MESH2%NVAR.EQ.0) THEN
        IF(LNG.EQ.1) WRITE(LU,*)
     &            'LE FICHIER NE CONTIENT PAS DE RESULTATS'
        IF(LNG.EQ.2) WRITE(LU,*) 'THE FILE CONTAINS NO RESULTS'
      ELSE
        ALLOCATE(MESH2%NAMEVAR(MESH2%NVAR),STAT=IERR)
        CALL FNCT_CHECK(IERR,'ALLOCATE MESH2%NAMEVAR')
        ALLOCATE(MESH2%UNITVAR(MESH2%NVAR),STAT=IERR)
        CALL FNCT_CHECK(IERR,'ALLOCATE MESH2%UNITVAR')
!
        FIRST = .TRUE.
        IVAR=1
        DO I=1,NVAR_MED
          IF(DEBUG.AND.(LNG.EQ.1)) WRITE(LU,*) '--DEBUT POUR VAR',I
          IF(DEBUG.AND.(LNG.EQ.2)) WRITE(LU,*) '--BEGINNING FOR VAR',I
          !GETTING INFORMATION ON THE FIELD
          CALL MFDNFC(NINP,I,NCOMP,IERR)
          CALL FNCT_CHECK(IERR,'MFDNFC')
          IF(DEBUG) WRITE(LU,*) 'NCOMP :',NCOMP
          ALLOCATE(NAMEVAR2(NCOMP),STAT=IERR)
          CALL FNCT_CHECK(IERR,'ALLOCATE NAMEVAR2 BIS')
          ALLOCATE(UNITVAR2(NCOMP),STAT=IERR)
          CALL FNCT_CHECK(IERR,'ALLOCATE UNITVAR2 BIS')
          CALL MFDFDI(NINP,I,FIELDNAME,MESHNAME,IDUM,IDUM,NAMEVAR2,
     &                UNITVAR2,DTUNIT,MESH2%TIMESTEP,IERR)
          CALL FNCT_CHECK(IERR,'MFDFDI')
          ! WE DON'T SAVE THE MODIF FIELD
          IF (FIELDNAME(1:11).EQ.'MODIF_FIELD')
     &      DEALLOCATE(NAMEVAR2,UNITVAR2)
          IF (FIELDNAME(1:11).EQ.'MODIF_FIELD') CYCLE
          DO J=1,NCOMP
            MESH2%NAMEVAR(IVAR+J-1) = FIELDNAME(1:16)
            IF(NCOMP.NE.1) CALL RENAME_VECTOR(MESH2%NAMEVAR(IVAR+J-1),J)
            MESH2%UNITVAR(IVAR+J-1) = UNITVAR2(J)
            IF(DEBUG.AND.(LNG.EQ.1)) WRITE(LU,*)
     &               'NOM DE LA VARIABLE : ',MESH2%NAMEVAR(IVAR+J-1)
            IF(DEBUG.AND.(LNG.EQ.1)) WRITE(LU,*)
     &               'UNITE DE LA VARIABLE : ',MESH2%UNITVAR(IVAR+J-1)
            IF(DEBUG.AND.(LNG.EQ.2)) WRITE(LU,*)
     &               'NAME OF THE VARIABLE: ',MESH2%NAMEVAR(IVAR+J-1)
            IF(DEBUG.AND.(LNG.EQ.2)) WRITE(LU,*)
     &               'UNIT OF THE VARIABLE: ',MESH2%UNITVAR(IVAR+J-1)
          ENDDO
          DEALLOCATE(NAMEVAR2,UNITVAR2)
          TYPENT = MED_NODE
          TYPGEO = MED_NONE
          IF(DEBUG.AND.(LNG.EQ.1)) WRITE(LU,*)
     &                  'NOMBRE DE PAS DE TEMPS :',MESH2%TIMESTEP
          IF(DEBUG.AND.(LNG.EQ.2)) WRITE(LU,*)
     &                  'NUMBER OF TIME STEPS:',MESH2%TIMESTEP
          ! DOING ALLOCATION ONLY ONCE
          IF(FIRST) THEN
            ALLOCATE(MESH2%RESULTS(MESH2%TIMESTEP,MESH2%NVAR,
     &               MESH2%NPOIN),STAT=IERR)
            CALL FNCT_CHECK(IERR,'ALLOCATE MESH2%RESULTS')
            ALLOCATE(MESH2%TIMES(MESH2%TIMESTEP),STAT=IERR)
            CALL FNCT_CHECK(IERR,'ALLOCATE MESH2%TIMES')
            MESH2%RESULTS = 0.D0
            MESH2%TIMES = 0.D0
            FIRST = .FALSE.
          ENDIF
          ! FOR EACH TIME STEP WE READ THE VARIABLE VALUES
          DO ITIME=1,MESH2%TIMESTEP
            IF(DEBUG) WRITE(LU,*) '-BEGINNING FOR TIMESTEP',ITIME
            !GET INFORMATION ON THE TIMESTEP
            DT = MED_NO_DT
            IT = MED_NO_IT
            CALL MFDCSI(NINP,FIELDNAME,ITIME,DT,IT,
     &                  MESH2%TIMES(ITIME),IERR)
            CALL FNCT_CHECK(IERR,'MFDCSI')
            IF(DEBUG.AND.(LNG.EQ.1))
     &               WRITE(LU,*) 'LECTURE DU PAS DE TEMPS :',
     &                 REAL(MESH2%TIMES(ITIME))
            IF(DEBUG.AND.(LNG.EQ.2))
     &               WRITE(LU,*) 'READING VALUES FOR TIME:',
     &                 REAL(MESH2%TIMES(ITIME))
            ! GET THE NUMBER OF VALUE FOR THIS FIELD
            CALL MFDNVA(NINP,FIELDNAME,ITIME-1,MED_NO_IT,TYPENT,TYPGEO,
     &                  NVAL,IERR)
            CALL FNCT_CHECK(IERR,'MFDNVA')
            IF(DEBUG.AND.(LNG.EQ.1)) WRITE(LU,*)'NOMBRE DE VALEURS :',
     &                      NVAL
            IF(DEBUG.AND.(LNG.EQ.2)) WRITE(LU,*)'NUMBER OF VALUES:',
     &                      NVAL
            IF (NVAL .EQ. 0) THEN
              IF(LNG.EQ.1) WRITE(LU,*) 'PAS DE VALEUR ',
     &                  MESH2%NAMEVAR(IVAR),
     &                  ' AU TEMPS :',MESH2%TIMES(ITIME)
              IF(LNG.EQ.2) WRITE(LU,*) 'NO VALUE FOR ',
     &                  MESH2%NAMEVAR(IVAR),
     &                  ' AT TIME:',MESH2%TIMES(ITIME)
            ENDIF
            ! USING A ANOTHER TABLE BECAUSE SOMTIMES (QUASI BUBBLE) THE
            ! TABLE IS BIGGER THAN IT SHOULD BE
            IF(NVAL.NE.MESH2%NPOIN) THEN
              IF(LNG.EQ.1) WRITE(LU,*)
     &                    'NOMBRE DE VALEURS DIFFERENT DE',
     &                    ' POINTS * NOMBRE OF COMPOSANT',
     &                    'NVAL :',NVAL,'NPOIN :',MESH2%NPOIN
              IF(LNG.EQ.2) WRITE(LU,*)
     &                    'NUMBER OF VALUES DIFFERENT FROM NUMBER OF',
     &                    ' POINTS * NUMBER OF COMPONENT',
     &                    'NVAL :',NVAL,'NPOIN :',MESH2%NPOIN
            ENDIF
            ! IF THERE ARE VALUE IN THE FIELD
            ! READING THE FILED VALUES IN THE MESH FILE
            IF(DEBUG.AND.(LNG.EQ.1)) WRITE(LU,*)
     &                  'NOMBRE DE COMPOSANT :',NCOMP
            IF(DEBUG.AND.(LNG.EQ.2)) WRITE(LU,*)
     &                  'NUMBER OF COMPONANT:',NCOMP
            ALLOCATE(RES(NVAL*NCOMP),STAT=IERR)
            CALL FNCT_CHECK(IERR,'ALLOCATE RES')
            DO J=1,NCOMP
              CALL MFDRVR(NINP,FIELDNAME,ITIME-1,MED_NO_IT,TYPENT,
     &                    TYPGEO,MED_NO_INTERLACE,J,RES,IERR)
              CALL FNCT_CHECK(IERR,'MFDRVR')
              MESH2%RESULTS(ITIME,IVAR+J-1,:) =
     &         RES((J-1)*MESH2%NPOIN+1:J*MESH2%NPOIN)
            ENDDO
            DEALLOCATE(RES)
            ! COPYING THE VALUES IN RESULTS
            IF(DEBUG.AND.(LNG.EQ.1)) WRITE(LU,*)
     &                        '-FIN POUR LE PAS DE TEMPS',ITIME
            IF(DEBUG.AND.(LNG.EQ.2)) WRITE(LU,*)
     &                        '-END FOR TIMESTEP',ITIME
          ENDDO
          IF(DEBUG.AND.(LNG.EQ.1)) WRITE(LU,*) '--FIN POUR VAR',I
          IF(DEBUG.AND.(LNG.EQ.2)) WRITE(LU,*) '--ENDING FOR VAR',I
          IVAR = IVAR + NCOMP
        ENDDO
      ENDIF

      CALL MFICLO(NINP,IERR)
      CALL FNCT_CHECK(IERR,'MFICLO')

      ! FILLING IB
      MESH2%IB(:)=0
      MESH2%IB(1)=1
      IF(MESH2%KNOLG(1).EQ.0) THEN
        MESH2%IB(8)=1
      ENDIF
!
!-----------------------------------------------------------------------
!
      WRITE(LU,*) '----------------------------------------------------'
      IF(LNG.EQ.1) WRITE(LU,*) '------FIN LECTURE DU FICHIER MED'
      IF(LNG.EQ.2) WRITE(LU,*) '------ENDING READING OF MED FILE'
      WRITE(LU,*) '----------------------------------------------------'
#else
      IF(LNG.EQ.1) WRITE(LU,*)
     &       'ERREUR : TENTATIVE DE LECTURE D UN FICHIER MED ',
     &       'SANS LA BIBLIOTHEQUE'
      IF(LNG.EQ.2) WRITE(LU,*)
     &       'ERROR : TRYING TO READ MED FILE WITHOUT MED LIBRARY'
      CALL PLANTE(1)
#endif
! ENDIF HAVE_MED
      END SUBROUTINE
!                       *****************
                        SUBROUTINE WRITE_MED
!                       *****************
     &(MEDFILE)
!
!***********************************************************************
! STBTEL   V6P1                                   11/07/2011
!***********************************************************************
!
!BRIEF    WRITE A FILE OF MED FORMAT WITH THE MESH OBJECT
!+        INFORMATIONS
!
!HISTORY  Y.AUDOUIN (EDF)
!+        11/07/2011
!+        V6P1
!+   CREATION OF THE FILE
!
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!| MEDFILE        |-->| NAME OF THE MED FILE
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!
      USE DECLARATIONS_STBTEL
      USE DECLARATIONS_SPECIAL
      IMPLICIT NONE
      ! LANGAE AND OUTPUT VALUE
!
!+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
!
      CHARACTER(LEN=MAXLENHARD)  MEDFILE
!
!+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
!
#if defined (HAVE_MED)
      INTEGER :: IERR,ITIME,IVAR
      INTEGER :: I,J,DIMVEC,NUMVEC
      INTEGER, ALLOCATABLE :: NUFANO(:), VECVAR(:)
      DOUBLE PRECISION, ALLOCATABLE :: COOR(:),RES(:)
      INTEGER :: TYPGEO
      CHARACTER(LEN=NAME_SIZE) :: MESHNAME
      CHARACTER(LEN=NAME_SIZE) :: FIELDNAME
      CHARACTER(LEN=SNAME_SIZE), ALLOCATABLE :: NAMEVAR(:),UNITVAR(:)
      INTEGER, ALLOCATABLE :: CON(:)
      LOGICAL :: ISVECTOR
      INTEGER :: TYPGEO2
      CHARACTER(LEN=NAME_SIZE) :: NAMEFAM,CDUM
      INTEGER :: NUMFAM,IDUM
      DOUBLE PRECISION :: DDUM
      CHARACTER(LEN=SNAME_SIZE) :: DTUNIT
      CHARACTER(LEN=SNAME_SIZE), ALLOCATABLE :: ELEMNAME(:)
      LOGICAL :: MYFALSE
!
      WRITE(LU,*) '----------------------------------------------------'
      IF(LNG.EQ.1) WRITE(LU,*) '------DEBUT ECRITURE DU FICHIER MED'
      IF(LNG.EQ.2) WRITE(LU,*) '------BEGINNING WRITTING OF MED FILE'
      WRITE(LU,*) '----------------------------------------------------'
!
!-----------------------------------------------------------------------
!
      ! WRITING THE MESH INFORMATIONS
!
      ! CREATING THE FILE
      CALL MFIOPE(NOUT,MEDFILE,MED_ACC_CREAT,IERR)
      CALL FNCT_CHECK(IERR,'MFIOPE')
!
      ! CREATING THE MESH
      IF(LNG.EQ.1) WRITE(LU,*) '---INFORMATIONS SUR LE MAILLAGE'
      IF(LNG.EQ.2) WRITE(LU,*) '---MESH INFORMATIONS'
      MESHNAME = 'MESH' // CHAR(0)
      ! IF WE HAVE NO DESCRIPTION SETTING THE TITLE AS DESCRIPTION
      IF(MESH2%DESCRIPTION(1:14).EQ.'NO DESCRIPTION') THEN
        MESH2%DESCRIPTION = ' '
        MESH2%DESCRIPTION = TRIM(MESH2%TITLE) // CHAR(0)
      ENDIF
      DTUNIT = "S"//CHAR(0)
      CALL MMHCRE(NOUT,MESHNAME,MESH2%NDIM,MESH2%NDIM,
     &            MED_UNSTRUCTURED_MESH,MESH2%DESCRIPTION,DTUNIT,
     &            MED_SORT_DTIT,MED_CARTESIAN,
     &            MESH2%NAMECOO,
     &            MESH2%UNITCOO,IERR)
      CALL FNCT_CHECK(IERR,'MMHCRE')
!
      ! ADDING THE NODES COORDINATES
      ALLOCATE(COOR(MESH2%NPOIN*MESH2%NDIM),STAT=IERR)
      CALL FNCT_CHECK(IERR,"ALLOCATE COOR")
      DO I=1,MESH2%NPOIN
        COOR(I+0*MESH2%NPOIN) = MESH2%X(I)
        COOR(I+1*MESH2%NPOIN) = MESH2%Y(I)
        IF(MESH2%NDIM.EQ.3) THEN
          COOR(I+2*MESH2%NPOIN) = MESH2%Z(I)
        ENDIF
      ENDDO
      CALL MMHCOW(NOUT,MESHNAME,MED_NO_DT,MED_NO_IT,DDUM,
     &            MED_NO_INTERLACE,MESH2%NPOIN,COOR,IERR)
      CALL FNCT_CHECK(IERR,'MMHCOW')
      DEALLOCATE(COOR)
!
      ! ADDING THE ELEMENTS
      ! CONSTRUCTING IKLE FOR MED
      ALLOCATE(CON(MESH2%NELEM*MESH2%NDP),STAT=IERR)
      CALL FNCT_CHECK(IERR,'ALLOCATE CON')
      DO I=1,MESH2%NELEM
        DO J=1,MESH2%NDP
          CON(I+(J-1)*MESH2%NELEM) = MESH2%IKLES((I-1)*MESH2%NDP+J)
        ENDDO
      ENDDO
      SELECT CASE(MESH2%TYPE_ELEM)
        CASE(TRIANGLE_ELT_TYPE)
          TYPGEO = MED_TRIA3
        CASE(QUADRANGLE_ELT_TYPE)
          TYPGEO = MED_QUAD4
        CASE(TETRAHEDRON_ELT_TYPE)
          TYPGEO = MED_TETRA4
        CASE(PRISM_ELT_TYPE)
          TYPGEO = MED_PENTA6
        CASE DEFAULT
          IF(LNG.EQ.1) WRITE(LU,*) 'ERREUR : TYPE D ELEMENTS INCONNU'
          IF(LNG.EQ.2) WRITE(LU,*) 'ERROR: UNKNOWN TYPE OF ELEMENTS'
          CALL PLANTE(1)
      END SELECT
      DDUM = 0.0
      ALLOCATE(ELEMNAME(MESH2%NELEM),STAT=IERR)
      CALL FNCT_CHECK(IERR,'ALLOCATE ELEMNAME')
      CALL MMHELW(NOUT,MESHNAME,MED_NO_DT,MED_NO_IT,DDUM,
     &            MED_CELL,TYPGEO,MED_NODAL,
     &            MED_NO_INTERLACE,MESH2%NELEM,CON,MED_FALSE,ELEMNAME,
     &            MED_FALSE,IDUM,MED_FALSE,IDUM,IERR)
      CALL FNCT_CHECK(IERR,'MMHELW')
      DEALLOCATE(ELEMNAME)
      DEALLOCATE(CON)
      ! ADDING THE 2D ELEMENTS IF THEY EXIST (ESTEL)
      IF(MESH2%NELEM2.NE.0) THEN
        IF(DEBUG.AND.(LNG.EQ.1)) WRITE(LU,*)
     &                 '-AJOUT D UN SECOND TYPE D ELEMENT'
        IF(DEBUG.AND.(LNG.EQ.2)) WRITE(LU,*)
     &                 '-ADDING SECOND ELEMENT TYPE'
        ALLOCATE(CON(MESH2%NELEM2*MESH2%NDP2),STAT=IERR)
        CALL FNCT_CHECK(IERR,'ALLOCATE CON 2')
        DO I=1,MESH2%NELEM2
          DO J=1,MESH2%NDP2
            CON(I+(J-1)*MESH2%NELEM2) = MESH2%IKLES2((I-1)*MESH2%NDP2+J)
          ENDDO
        ENDDO
        SELECT CASE(MESH2%TYPE_ELEM2)
          CASE(TRIANGLE_ELT_TYPE)
            TYPGEO = MED_TRIA3
          CASE(QUADRANGLE_ELT_TYPE)
            TYPGEO = MED_QUAD4
          CASE(TETRAHEDRON_ELT_TYPE)
            TYPGEO = MED_TETRA4
          CASE(PRISM_ELT_TYPE)
            TYPGEO = MED_PENTA6
          CASE DEFAULT
            IF(LNG.EQ.1) WRITE(LU,*) 'ERREUR : TYPE D ELEMENTS INCONNU'
            IF(LNG.EQ.2) WRITE(LU,*) 'ERROR: UNKNOWN TYPE OF ELEMENTS'
            CALL PLANTE(1)
        END SELECT
        ALLOCATE(ELEMNAME(MESH2%NELEM),STAT=IERR)
        CALL MMHELW(NOUT,MESHNAME,MED_NO_DT,MED_NO_IT,DDUM,
     &              MED_CELL,TYPGEO2,MED_NODAL,
     &              MED_NO_INTERLACE,MESH2%NELEM2,CON,MED_FALSE,
     &              ELEMNAME,MED_FALSE,IDUM,MED_FALSE,IDUM,IERR)
        CALL FNCT_CHECK(IERR,'MMHELW')
        DEALLOCATE(CON,ELEMNAME)
      ENDIF
!
      ! ADDING GLOBAL NUMBERING IF NECESSARY
      IF (MESH2%IB(8).NE.0 .OR. MESH2%IB(9).NE.0) THEN
        CALL MMHGNW(NOUT,MESHNAME,MED_NO_DT,MED_NO_IT,MED_NODE,
     &              MED_NONE,MESH2%NPOIN,MESH2%KNOLG,IERR)
        CALL FNCT_CHECK(IERR,"MMHGNW")
      ENDIF
!
      ! BUILDING THE FAMILIES
      IF(LNG.EQ.1) WRITE(LU,*) '---INFORMATIONS SUR LES FAMILLES'
      IF(LNG.EQ.2) WRITE(LU,*) '---FAMILIES INFORMATIONS'
      ! CREATING THE ZERO FAMILY
      NAMEFAM='FAMILLE_ZERO'//CHAR(0)
      NUMFAM=0
      CALL MFACRE(NOUT,MESHNAME,NAMEFAM,NUMFAM,0,' ',IERR)
      CALL FNCT_CHECK(IERR,'MFACRE 0')
      IF(MESH2%NFAM.NE.0) THEN
        DO I=1,MESH2%NFAM
          CALL MFACRE(NOUT,MESHNAME,TRIM(MESH2%NAMEFAM(I))//CHAR(0),
     &                MESH2%IDFAM(I),MESH2%NGROUPFAM(I),
     &                MESH2%GROUPFAM(I,1:MESH2%NGROUPFAM(I)),IERR)
          CALL FNCT_CHECK(IERR,'MFACRE I')
        ENDDO
        ! IF WE HAVE BOUNDARY CONDITIONS
        IF (MESH2%NPTFR.NE.0) THEN
          ALLOCATE(NUFANO(MESH2%NPOIN),STAT=IERR)
          CALL FNCT_CHECK(IERR,'ALLOCATE NUFANO')
          ! WE NEED TO EXANGE THE VALUE WITH THE ID OF THE FAMILY
          DO J=1,MESH2%NPTFR
            I = 1
            DO WHILE(I.LE.MESH2%NFAM)
              ! WE TAKE ONLY FAMILIES ON NODES
              IF(MESH2%IDFAM(I).GT.0) THEN
                IF(MESH2%LIHBOR(J).EQ.MESH2%VALFAM(I)) THEN
                  MESH2%LIHBOR(J)=MESH2%IDFAM(I)
                  I = MESH2%NFAM
                ENDIF
              ENDIF
              I = I + 1
            ENDDO
          ENDDO
          ! BUILD THE FAMILY ID FOR EACH NODES 0 FOR NODES WITHOUT FAMILIES
          NUFANO(:) = 0
          DO I=1,MESH2%NPTFR
            NUFANO(MESH2%NBOR(I)) = MESH2%LIHBOR(I)
          ENDDO
          CALL MMHFNW(NOUT,MESHNAME,MED_NO_DT,MED_NO_IT,MED_NODE,
     &                MED_NONE,MESH2%NPOIN,NUFANO,IERR)
          CALL FNCT_CHECK(IERR,'MMHFNW NODE BOUNDARY')
          DEALLOCATE(NUFANO)
        ENDIF
        ! ADD THE FAMILY COLOR FOR EACH NODE (UNV) IF NO BOUNDARY
        ! CONDITIONS
        IF(ALLOCATED(MESH2%COLOR).AND.MESH2%NPTFR.EQ.0) THEN
          ! WE NEED TO REPLACE THE VAL BY THE FAMILY ID
          DO J= 1,MESH2%NPOIN
            I = 1
            DO WHILE(I.LE.MESH2%NFAM)
              ! WE ONLY DCONSIDER THE FAMILIES ON NODES (ID > 0)
              IF(MESH2%IDFAM(I).GT.0) THEN
                IF(MESH2%COLOR(J).EQ.MESH2%VALFAM(I)) THEN
                  MESH2%COLOR(J)=MESH2%IDFAM(I)
                  ! FINISHING THE LOOP ON THE FAMILIES
                  I=MESH2%NFAM
                ENDIF
              ENDIF
              I = I + 1
            ENDDO
          ENDDO
          CALL MMHFNW(NOUT,MESHNAME,MED_NO_DT,MED_NO_IT,MED_NODE,
     &                MED_NONE,MESH2%NPOIN,MESH2%COLOR,IERR)
          CALL FNCT_CHECK(IERR,'MMHFNW NODES COLOR')
        ENDIF
        ! ADD THE FAMILY COLOR FOR EACH ELEMENT (ESTEL)
        IF(ALLOCATED(MESH2%NCOLOR)) THEN
          ! WE NEED TO REPLACE THE VAL BY THE FAMILY ID
          DO J= 1,MESH2%NELEM
            I=1
            ! ELEMENT FAMILY HAVE A NEGATIVE ID
            DO WHILE(I.LE.MESH2%NFAM)
              IF(MESH2%IDFAM(I).LT.0) THEN
                IF(MESH2%NCOLOR(J).EQ.MESH2%VALFAM(I)) THEN
                  MESH2%NCOLOR(J)=MESH2%IDFAM(I)
                  ! END THE FAM LOOP
                  I=MESH2%NFAM
                ENDIF
              ENDIF
              I = I + 1
            ENDDO
          ENDDO
          SELECT CASE (MESH2%TYPE_ELEM)
          CASE(TRIANGLE_ELT_TYPE)
            TYPGEO=MED_TRIA3
          CASE(QUADRANGLE_ELT_TYPE)
            TYPGEO=MED_QUAD4
          CASE(TETRAHEDRON_ELT_TYPE)
            TYPGEO=MED_TETRA4
          CASE(PRISM_ELT_TYPE)
            TYPGEO=MED_PENTA6
          END SELECT
          CALL MMHFNW(NOUT,MESHNAME,MED_NO_DT,MED_NO_IT,MED_CELL,
     &                TYPGEO,MESH2%NELEM,MESH2%NCOLOR,IERR)
          CALL FNCT_CHECK(IERR,'MMHFNW ELEM')
        ENDIF
        ! ADD THE FAMILY FOR EACH OTHER ELEMENT (ESTEL)
        IF(ALLOCATED(MESH2%NCOLOR2)) THEN
          ! WE NEED TO REPLACE THE VAL BY THE FAMILY ID
          DO J= 1,MESH2%NELEM2
            I=1
            ! ELEMENT FAMILY HAVE A NEGATIVE ID
            DO WHILE(I.LE.MESH2%NFAM)
              IF(MESH2%IDFAM(I).LT.0) THEN
                IF(MESH2%NCOLOR2(J).EQ.MESH2%VALFAM(I)) THEN
                  MESH2%NCOLOR2(J)=MESH2%IDFAM(I)
                  ! END THE FAM LOOP
                  I=MESH2%NFAM
                ENDIF
              ENDIF
              I = I + 1
            ENDDO
          ENDDO
          SELECT CASE (MESH2%TYPE_ELEM2)
          CASE(TRIANGLE_ELT_TYPE)
            TYPGEO=MED_TRIA3
          CASE(QUADRANGLE_ELT_TYPE)
            TYPGEO=MED_QUAD4
          CASE(TETRAHEDRON_ELT_TYPE)
            TYPGEO=MED_TETRA4
          CASE(PRISM_ELT_TYPE)
            TYPGEO=MED_PENTA6
          END SELECT
          CALL MMHFNW(NOUT,MESHNAME,MED_NO_DT,MED_NO_IT,MED_CELL,
     &                TYPGEO,MESH2%NELEM2,MESH2%NCOLOR2,IERR)
          CALL FNCT_CHECK(IERR,'MMHFNW ELEM2')
        ENDIF
      ENDIF
!
      ! ADDING THE RESULTS
      ! BUILDING THE FIELDS
      IF(LNG.EQ.1) WRITE(LU,*) '---INFORMATIONS SUR LES REULTATS'
      IF(LNG.EQ.2) WRITE(LU,*) '---RESULTS INFORMATIONS'
      IF(MESH2%NVAR.NE.0) THEN
        DIMVEC=1
        ALLOCATE(VECVAR(MESH2%NDIM))
        CALL FNCT_CHECK(IERR,'ALLOCATE VECVAR')
        DO IVAR=1,MESH2%NVAR
          FIELDNAME = ' '
          FIELDNAME = TRIM(MESH2%NAMEVAR(IVAR))
          ! WE CHECK IF THE VARIABLE IS A VECTOR
          CALL IFVECTOR_(FIELDNAME,NUMVEC,ISVECTOR)
          FIELDNAME = TRIM(FIELDNAME) // CHAR(0)
          ! IF SO WE KEEP THE VARAIBLE NUMBER AND
          IF(ISVECTOR) THEN
            VECVAR(NUMVEC) = IVAR
            ! IF NOT THE LAST COMPONENT SKIP TO NEXT VARAIBLE
            IF(NUMVEC.NE.MESH2%NDIM) CYCLE
            DIMVEC = NUMVEC
          ENDIF
          ALLOCATE(NAMEVAR(DIMVEC),STAT=IERR)
          CALL FNCT_CHECK(IERR,'ALLOCATE NAMEVAR')
          ALLOCATE(UNITVAR(DIMVEC),STAT=IERR)
          CALL FNCT_CHECK(IERR,'ALLOCATE UNITVAR')
          IF(ISVECTOR) THEN
            DO I=1,DIMVEC
              NAMEVAR(I) = REPEAT(' ',SNAME_SIZE)
              UNITVAR(I) = REPEAT(' ',SNAME_SIZE)
              NAMEVAR(I) = TRIM(MESH2%NAMEVAR(VECVAR(I)))
              UNITVAR(I) = TRIM(MESH2%UNITVAR(VECVAR(I)))
            ENDDO
            VECVAR(:) = 0
          ELSE
            NAMEVAR(1) = TRIM(MESH2%NAMEVAR(IVAR))//CHAR(0)
            UNITVAR(1) = TRIM(MESH2%UNITVAR(IVAR))//CHAR(0)
          ENDIF
          CALL MFDCRE(NOUT,FIELDNAME,MED_FLOAT64,DIMVEC,NAMEVAR,
     &                UNITVAR,'S',MESHNAME,IERR)
          CALL FNCT_CHECK(IERR,'MFDCRE')
          IF(DEBUG.AND.(LNG.EQ.1)) WRITE(LU,*) '--POUR VARIABLE : ',
     &               FIELDNAME,DIMVEC
          IF(DEBUG.AND.(LNG.EQ.2)) WRITE(LU,*) '--FOR VARIABLE: ',
     &               FIELDNAME,DIMVEC
          DIMVEC = 1
          DEALLOCATE(NAMEVAR,UNITVAR)
        ENDDO
        ! ADD THE RESULT FOR EACH TIME STEP
        DO ITIME=1,MESH2%TIMESTEP
          IF(DEBUG.AND.(LNG.EQ.1)) WRITE(LU,*) '-POUR PAS DE TEMPS :',
     &        MESH2%TIMES(ITIME)
          IF(DEBUG.AND.(LNG.EQ.2)) WRITE(LU,*) '-FOR TIME STEP:',
     &        MESH2%TIMES(ITIME)
          DO IVAR=1,MESH2%NVAR
            FIELDNAME = ''
            FIELDNAME = TRIM(MESH2%NAMEVAR(IVAR))
            CALL IFVECTOR_(FIELDNAME,NUMVEC,ISVECTOR)
            FIELDNAME = TRIM(FIELDNAME) // CHAR(0)
            IF(ISVECTOR) THEN
              ! IF FIRST TIME WE ALLOCATE THE RESULT TABLE
              IF(NUMVEC.EQ.1) THEN
                ALLOCATE(RES(MESH2%NPOIN*MESH2%NDIM),STAT=IERR)
                CALL FNCT_CHECK(IERR,'ALLOCATE RES VECTOR')
              ENDIF
              ! WE ADD THE RESULTS TO THE RESULT TABLE
              RES((NUMVEC-1)*MESH2%NPOIN+1:(NUMVEC*MESH2%NPOIN)) =
     &            MESH2%RESULTS(ITIME,IVAR,:)
              ! IF NOT THE LAST COMPONENENT WE SKIP
              IF(NUMVEC.NE.MESH2%NDIM) CYCLE
              DIMVEC = NUMVEC
            ELSE
              ! IF A SCALAR FIELD
              ALLOCATE(RES(MESH2%NPOIN),STAT=IERR)
              CALL FNCT_CHECK(IERR,'ALLOCATE RES')
              RES(:) = MESH2%RESULTS(ITIME,IVAR,:)
              DIMVEC = 1
            ENDIF
            CALL MFDRVW(NOUT,FIELDNAME,ITIME-1,MED_NO_IT,
     &                  MESH2%TIMES(ITIME),MED_NODE,MED_NONE,
     &                  MED_NO_INTERLACE,MED_ALL_CONSTITUENT,
     &                  MESH2%NPOIN,RES,IERR)
            CALL FNCT_CHECK(IERR,'MFDRVW')
            DEALLOCATE(RES)
          ENDDO
        ENDDO
      ENDIF
!
      CALL MFICLO(NOUT,IERR)
      CALL FNCT_CHECK(IERR,'MFICLO')
!
!-----------------------------------------------------------------------
!
      WRITE(LU,*) '----------------------------------------------------'
      IF(LNG.EQ.1) WRITE(LU,*) '------FIN ECRITURE DU FICHIER MED'
      IF(LNG.EQ.2) WRITE(LU,*) '------ENDING WRITTING OF MED FILE'
      WRITE(LU,*) '----------------------------------------------------'
#else
      IF(LNG.EQ.1) WRITE(LU,*)
     &     'ERREUR : TENTATIVE D ECRITURE D UN FICHIER MED ',
     &     'SANS BIBLIOTHEQUE'
      IF(LNG.EQ.2) WRITE(LU,*)
     &     'ERROR : TRYING TO WRITE MED FILE WITHOUT MED LIBRARY'
      CALL PLANTE(1)
#endif
! ENDIF HAVE_MED
      END SUBROUTINE
!
!
#if defined(HAVE_MED)
!                    ************************
                     SUBROUTINE MED_GET_NELEM
!                    ************************
     & (MESHNAME,TYPGEO)
!
!***********************************************************************
! STBTEL   V6P1                                   11/07/2011
!***********************************************************************
!
!BRIEF    READS THE NUMBER OF ELEMENT IN A MED FILE
!
!HISTORY  Y.AUDOUIN (EDF)
!+        11/07/2011
!+        V6P1
!+   CREATION OF THE FILE
!
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!| MEDFILE        |-->| NAME OF THE MED FILE IN THE TEMPORARY FOLDER
!| FAMFILE        |-->| NAME OF THE BOUNDARY FILE IN THE TEMPORARY FOLDER
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!
        USE DECLARATIONS_STBTEL
!
        USE DECLARATIONS_SPECIAL
        IMPLICIT NONE
        ! LANGAE AND OUTPUT VALUE
!
!+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
!
        CHARACTER(LEN=NAME_SIZE), INTENT(IN) :: MESHNAME
        INTEGER, INTENT(INOUT) :: TYPGEO
!
!+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
!
        INTEGER IERR,IDUM
!
!-----------------------------------------------------------------------
!
        ! Search for 3d elements
        MESH2%NDIM = 3
        ! In 3d we have either prism or tetrahedron
        TYPGEO = MED_PENTA6
        MESH2%NDP = 6
        MESH2%TYPE_ELEM = PRISM_ELT_TYPE
        CALL MMHNME(NINP,MESHNAME,MED_NO_DT,MED_NO_IT,MED_CELL,TYPGEO,
     &              MED_CONNECTIVITY,MED_NODAL,IDUM,IDUM,MESH2%NELEM,
     &              IERR)
        CALL FNCT_CHECK(IERR,'MMHNME')
        IF(MESH2%NELEM.NE.0) THEN
          IF(DEBUG) THEN
            IF(LNG.EQ.1) WRITE(LU,*) 'ELEMENT DE TYPE : MED_PENTA6'
            IF(LNG.EQ.2) WRITE(LU,*) 'ELEMENT TYPE: MED_PENTA6'
          ENDIF
          RETURN
        ENDIF
!
        TYPGEO = MED_TETRA4
        MESH2%NDP = 4
        MESH2%TYPE_ELEM = TETRAHEDRON_ELT_TYPE
        CALL MMHNME(NINP,MESHNAME,MED_NO_DT,MED_NO_IT,MED_CELL,
     &              TYPGEO,MED_CONNECTIVITY,MED_NODAL,
     &              IDUM,IDUM,MESH2%NELEM,IERR)
        CALL FNCT_CHECK(IERR,'MMHNME')
        IF(MESH2%NELEM.NE.0) THEN
          IF(DEBUG) THEN
            IF(LNG.EQ.1) WRITE(LU,*) 'ELEMENT DE TYPE : MED_TETRA4'
            IF(LNG.EQ.2) WRITE(LU,*) 'ELEMENT TYPE: MED_TETRA4'
          ENDIF
          RETURN
        ENDIF
!
        ! NO 3d elements searching for 2d
        MESH2%NDIM = 2
        ! IF IN 2D WE HAVE TRIANGLE OR QUADRA
        TYPGEO = MED_TRIA3
        MESH2%NDP = 3
        MESH2%TYPE_ELEM = TRIANGLE_ELT_TYPE
        CALL MMHNME(NINP,MESHNAME,MED_NO_DT,MED_NO_IT,MED_CELL,TYPGEO,
     &              MED_CONNECTIVITY,MED_NODAL,IDUM,IDUM,MESH2%NELEM,
     &              IERR)
        CALL FNCT_CHECK(IERR,'MMHNME')
        IF(MESH2%NELEM.NE.0) THEN
          IF(DEBUG) THEN
            IF(LNG.EQ.1) WRITE(LU,*) 'ELEMENT DE TYPE : MED_TRIA3'
            IF(LNG.EQ.2) WRITE(LU,*) 'ELEMENT TYPE: MED_TRIA3'
          ENDIF
          RETURN
        ENDIF
!
        TYPGEO = MED_QUAD4
        MESH2%NDP = 4
        MESH2%TYPE_ELEM = QUADRANGLE_ELT_TYPE
        CALL MMHNME(NINP,MESHNAME,MED_NO_DT,MED_NO_IT,MED_CELL,
     &              TYPGEO,MED_CONNECTIVITY,MED_NODAL,
     &              IDUM,IDUM,MESH2%NELEM,IERR)
        CALL FNCT_CHECK(IERR,'MMHNME')
        IF(MESH2%NELEM.NE.0) THEN
          IF(DEBUG) THEN
            IF(LNG.EQ.1) WRITE(LU,*) 'ELEMENT DE TYPE : MED_QUAD4'
            IF(LNG.EQ.2) WRITE(LU,*) 'ELEMENT TYPE: MED_QUAD4'
          ENDIF
        ELSE
          IF(LNG.EQ.1)WRITE(LU,*) 'ERREUR : TYPE D ELEMENTS INCONNU'
          IF(LNG.EQ.2) WRITE(LU,*) 'ERROR: UNKNOWN TYPE OF ELEMENTS'
          CALL PLANTE(1)
        ENDIF
!
      END SUBROUTINE

!                    ************************
                     SUBROUTINE MED_GET_NELEM_BND
!                    ************************
     & (MESHNAME,TYPGEO)
!
!***********************************************************************
! STBTEL   V6P1                                   11/07/2011
!***********************************************************************
!
!BRIEF    READS THE NUMBER OF BOUNDARY ELEMENT IN A MED FILE
!
!HISTORY  Y.AUDOUIN (EDF)
!+        11/07/2011
!+        V6P1
!+   CREATION OF THE FILE
!
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!| MEDFILE        |-->| NAME OF THE MED FILE IN THE TEMPORARY FOLDER
!| FAMFILE        |-->| NAME OF THE BOUNDARY FILE IN THE TEMPORARY FOLDER
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!
!
        USE DECLARATIONS_STBTEL
!
        USE DECLARATIONS_SPECIAL
        IMPLICIT NONE
        ! LANGAE AND OUTPUT VALUE
!
!+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
!
        CHARACTER(LEN=NAME_SIZE), INTENT(IN) :: MESHNAME
        INTEGER, INTENT(INOUT) :: TYPGEO
!
!+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
!
        INTEGER IERR,IDUM,NUM
!
!-----------------------------------------------------------------------
!
        IF(MESH2%NDIM.EQ.2) THEN
          ! IN 2D THE BOUNDARY ELEMENT TYPE IS SEG
          TYPGEO = MED_SEG2
          MESH2%NDP2 = 2
          MESH2%TYPE_ELEM2 = EDGE_BND_ELT_TYPE
          CALL MMHNME(NINP,MESHNAME,MED_NO_DT,MED_NO_IT,MED_CELL,
     &                TYPGEO,MED_CONNECTIVITY,MED_NODAL,
     &                IDUM,IDUM,NUM,IERR)
          CALL FNCT_CHECK(IERR,'MMHNME')
          IF(NUM.NE.0) THEN
            IF (DEBUG) THEN
            IF (LNG.EQ.1) WRITE(LU,*) 'ELEMENT DE FRONTIERE : MED_SEG2'
            IF (LNG.EQ.2) WRITE(LU,*) 'BOUNDARY ELEMENT TYPE: MED_SEG2'
            ENDIF
          ELSE
            IF (DEBUG) THEN
            IF (LNG.EQ.1) WRITE(LU,*) 'PAS D ELEMENT DE FRONTIERE'
            IF (LNG.EQ.2) WRITE(LU,*) 'NO BOUNDARY ELEMENT'
            ENDIF
          ENDIF
        ELSE
          ! IN 3D THE BOUNDARY ELEMENT TYPE IS EITHER TETRA OR QUADRA
          TYPGEO = MED_TRIA3
          MESH2%NDP2 = 3
          MESH2%TYPE_ELEM2 = TRIANGLE_ELT_TYPE
          CALL MMHNME(NINP,MESHNAME,MED_NO_DT,MED_NO_IT,MED_CELL,
     &                TYPGEO,MED_CONNECTIVITY,MED_NODAL,
     &                IDUM,IDUM,NUM,IERR)
          CALL FNCT_CHECK(IERR,'MMHNME')
          IF(NUM.EQ.0) THEN
            TYPGEO = MED_QUAD4
            MESH2%NDP2 = 4
            MESH2%TYPE_ELEM2 = QUADRANGLE_ELT_TYPE
            CALL MMHNME(NINP,MESHNAME,MED_NO_DT,MED_NO_IT,MED_CELL,
     &                  TYPGEO,MED_CONNECTIVITY,MED_NODAL,IDUM,IDUM,
     &                  NUM,IERR)
            CALL FNCT_CHECK(IERR,'MMHNME')
            IF(DEBUG.AND.(NUM.NE.0)) THEN
            IF(LNG.EQ.1) WRITE(LU,*) 'ELEMENT DE FRONTIERE : MED_QUAD4'
            IF(LNG.EQ.2) WRITE(LU,*) 'BOUNDARY ELEMENT TYPE: MED_QUAD4'
            ENDIF
          ELSE
            IF(DEBUG) THEN
            IF(LNG.EQ.1) WRITE(LU,*) 'ELEMENT DE FRONTIERE : MED_TRIA3'
            IF(LNG.EQ.2) WRITE(LU,*) 'BOUNDARY ELEMENT TYPE: MED_TRIA3'
            ENDIF
          ENDIF
        ENDIF
        MESH2%NELEM2 = NUM
!
      END SUBROUTINE
!
!                    ************************
                     SUBROUTINE MED_BUILD_BND
!                    ************************
     & (LIMFILE,MESHNAME,TYPGEO,TYPGEO2)
!
!***********************************************************************
! STBTEL   V6P1                                   11/07/2011
!***********************************************************************
!
!BRIEF    READS THE NUMBER OF BOUNDARY ELEMENT IN A MED FILE
!
!HISTORY  Y.AUDOUIN (EDF)
!+        11/07/2011
!+        V6P1
!+   CREATION OF THE FILE
!
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!| MEDFILE        |-->| NAME OF THE MED FILE IN THE TEMPORARY FOLDER
!| FAMFILE        |-->| NAME OF THE BOUNDARY FILE IN THE TEMPORARY FOLDER
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!
!
        USE DECLARATIONS_STBTEL
        USE CONV_LIM
!
        USE DECLARATIONS_SPECIAL
        IMPLICIT NONE
        ! LANGAE AND OUTPUT VALUE
!
!+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
!
        CHARACTER(LEN=MAXLENHARD), INTENT(IN) :: LIMFILE
        CHARACTER(LEN=NAME_SIZE), INTENT(IN) :: MESHNAME
        INTEGER, INTENT(INOUT) :: TYPGEO
        INTEGER, INTENT(INOUT) :: TYPGEO2
!
!+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
!
        INTEGER IERR,IPTFR,I,J
!
!-----------------------------------------------------------------------
!

      ! READING EACH POINTS FAMILY
      ALLOCATE(MESH2%COLOR(MESH2%NPOIN),STAT=IERR)
      CALL FNCT_CHECK(IERR,'ALLOCATE MESH2%COLOR')
      MESH2%COLOR = 0
      CALL MMHFNR(NINP,MESHNAME,MED_NO_DT,MED_NO_IT,MED_NODE,MED_NONE,
     &            MESH2%COLOR,IERR)
      ! DO NOT CHECK FOR IERR BECAUSE IF THEY ARE NO COLOR THE FUNCTION
      ! FAILS
      ! COMPUTE NPTFR
      MESH2%NPTFR = COUNT(MESH2%COLOR.NE.0)
      IF(MESH2%NPTFR.EQ.0) THEN
        ! CREATING IPOBO
        ALLOCATE(MESH2%IPOBO(MESH2%NPOIN),STAT=IERR)
        CALL FNCT_CHECK(IERR,'ALLOCATE MESH2%IPOBO')
        MESH2%IPOBO=0
        IF(LIMFILE(1:1).EQ.' ') THEN
          IF(LNG.EQ.1) WRITE(LU,*) 'LE FICHIER MED NE CONTIENT PAS DE ',
     &                        'CONDITIONS LIMITES'
          IF(LNG.EQ.2) WRITE(LU,*) 'THE MED FILE CONTAINS NO BOUNDARY'
        ELSE
          CALL READ_LIM(LIMFILE)
          IF(DEBUG) WRITE(LU,*) 'NPTFR :',MESH2%NPTFR
          ! FILLING IPOBO
          DO I=1,MESH2%NPTFR
            MESH2%IPOBO(MESH2%NBOR(I)) = MESH2%LIHBOR(I)
          ENDDO
        ENDIF
      ELSE
        ! FILLING NBOR AND LIHBOR AN IPOBO
        ALLOCATE(MESH2%IPOBO(MESH2%NPOIN),STAT=IERR)
        CALL FNCT_CHECK(IERR,'ALLOCATE MESH2%IPOBO')
        ALLOCATE(MESH2%NBOR(MESH2%NPTFR),STAT=IERR)
        CALL FNCT_CHECK(IERR,'ALLOCATE MESH2%NBOR')
        ALLOCATE(MESH2%LIHBOR(MESH2%NPTFR),STAT=IERR)
        CALL FNCT_CHECK(IERR,'ALLOCATE MESH2%LIHBOR')
        IPTFR=1
        DO I=1,MESH2%NPOIN
          IF(MESH2%COLOR(I).NE.0) THEN
            MESH2%NBOR(IPTFR) = I
            J = 1
            DO WHILE(J.LE.MESH2%NFAM)
              IF(MESH2%COLOR(I).EQ.MESH2%IDFAM(J)) THEN
                MESH2%COLOR(I) = MESH2%VALFAM(J)
                MESH2%LIHBOR(IPTFR) = MESH2%VALFAM(J)
                J = MESH2%NFAM
              ENDIF
              J = J + 1
            ENDDO
            MESH2%IPOBO(I) = 1
            IPTFR = IPTFR + 1
          ELSE
            MESH2%IPOBO(I) = 0
          ENDIF
        ENDDO
      ENDIF
      IF(DEBUG.AND.(LNG.EQ.1))
     &    WRITE(LU,*) 'NOMBRE DE POINT DE BORD :',MESH2%NPTFR
      IF(DEBUG.AND.(LNG.EQ.2))
     &    WRITE(LU,*) 'NUMBER OF BOUNDARY POINTS:',MESH2%NPTFR
      ALLOCATE(MESH2%NCOLOR(MESH2%NELEM),STAT=IERR)
      CALL FNCT_CHECK(IERR,'ALLOCATE MESH2%NCOLOR')
      MESH2%NCOLOR = 0
      CALL MMHFNR(NINP,MESHNAME,MED_NO_DT,MED_NO_IT,MED_CELL,TYPGEO,
     &            MESH2%NCOLOR,IERR)
      ! DO NOT CHECK FUCNTION IERR BECAUSE IF THEY ARE NO COLOR THE
      ! FUNCTION RETURNS -1
      IF(COUNT(MESH2%NCOLOR.EQ.0) .EQ. MESH2%NELEM) THEN
        DEALLOCATE(MESH2%NCOLOR)
      ELSE
        DO J=1,MESH2%NELEM
          I = 1
          DO WHILE(I.LE.MESH2%NFAM)
            IF(MESH2%NCOLOR(J).EQ.MESH2%IDFAM(I)) THEN
              MESH2%NCOLOR(J) = MESH2%VALFAM(I)
              I = MESH2%NFAM
            ENDIF
            I = I + 1
          ENDDO
        ENDDO
      ENDIF
      ! READING FAMILIES FOR THE SECOND ELEMENT
      IF(MESH2%NELEM2.NE.0) THEN
        ALLOCATE(MESH2%NCOLOR2(MESH2%NELEM2),STAT=IERR)
        CALL FNCT_CHECK(IERR,'ALLOCATE MESH2%NCOLOR2')
        MESH2%NCOLOR2=0
        CALL MMHFNR(NINP,MESHNAME,MED_NO_DT,MED_NO_IT,MED_CELL,TYPGEO2,
     &              MESH2%NCOLOR2,IERR)
        ! DO NOT CHECK FUCNTION IERR BECAUSE IF THEY ARE NO COLOR THE
        ! FUNCTION RETURNS -1
        ! IF THE TABLE IS EMPTY WE DEALLOCATE IT
        IF(COUNT(MESH2%NCOLOR2.EQ.0) .EQ. MESH2%NELEM2) THEN
          DEALLOCATE(MESH2%NCOLOR2)
        ELSE
          DO J=1,MESH2%NELEM2
            I = 1
            DO WHILE(I.LE.MESH2%NFAM)
              IF(MESH2%NCOLOR2(J).EQ.MESH2%IDFAM(I)) THEN
                MESH2%NCOLOR2(J) = MESH2%VALFAM(I)
                I = MESH2%NFAM
              ENDIF
              I = I + 1
            ENDDO
          ENDDO
        ENDIF
      ENDIF

      END SUBROUTINE
!
!                    ************************
                     SUBROUTINE MED_BUILD_BND_HYDRO
!                    ************************
     & (GRPFILE,MESHNAME,TYPGEO,TYPGEO2)
!
!***********************************************************************
! STBTEL   V6P1                                   11/07/2011
!***********************************************************************
!
!BRIEF    READS THE NUMBER OF BOUNDARY ELEMENT IN A MED FILE
!
!HISTORY  Y.AUDOUIN (EDF)
!+        11/07/2011
!+        V6P1
!+   CREATION OF THE FILE
!
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!| MEDFILE        |-->| NAME OF THE MED FILE IN THE TEMPORARY FOLDER
!| FAMFILE        |-->| NAME OF THE BOUNDARY FILE IN THE TEMPORARY FOLDER
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!
!
      USE DECLARATIONS_STBTEL
      USE CONV_LIM
!
      USE DECLARATIONS_SPECIAL
      IMPLICIT NONE
      ! LANGAE AND OUTPUT VALUE
!
!+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
!
      CHARACTER(LEN=MAXLENHARD), INTENT(IN) :: GRPFILE
      CHARACTER(LEN=NAME_SIZE), INTENT(IN) :: MESHNAME
      INTEGER, INTENT(INOUT) :: TYPGEO
      INTEGER, INTENT(INOUT) :: TYPGEO2
!
!+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
!
      INTEGER IERR,IPTFR,I,J,NGRP
      INTEGER POS
      INTEGER, ALLOCATABLE :: GRP_VALUE(:)
      CHARACTER(LEN=LNAME_SIZE), ALLOCATABLE :: GRP_NAME(:)
      CHARACTER(LEN=200) :: LINE
      INTEGER :: ID
!
!-----------------------------------------------------------------------
!
      CALL GET_FREE_ID(ID)
      ! Get group <-> boundary association from grpfile
      OPEN(ID, FILE=GRPFILE, FORM='FORMATTED', IOSTAT=IERR)
      CALL FNCT_CHECK(IERR,'OPEN '//TRIM(GRPFILE))
      READ(ID, *) NGRP
      ALLOCATE(GRP_VALUE(NGRP), STAT=IERR)
      CALL FNCT_CHECK(IERR,'ALLOCATE GRP_VALUE')
      ALLOCATE(GRP_NAME(NGRP), STAT=IERR)
      CALL FNCT_CHECK(IERR,'ALLOCATE GRP_NAME')

      DO I=1,NGRP
        READ(ID, '(A200)') LINE
        POS = INDEX(LINE, ':')
        GRP_NAME(I) = LINE(:POS-1)
        READ(LINE(POS+1:), *) GRP_VALUE(I)
        WRITE(LU, *) TRIM(GRP_NAME(I)), ' <-> ', GRP_VALUE(I)
      ENDDO
      CLOSE(ID)


      END SUBROUTINE
!
      SUBROUTINE STB2MED_GEO(TYPE_ELEM,TYPGEO)
!         GIVE MED EQUIVALENT FOR A GIVEN TELEMAC ELEMENT TYPE
      USE DECLARATIONS_STBTEL
      USE DECLARATIONS_SPECIAL
      IMPLICIT NONE
      ! LANGAE AND OUTPUT VALUE
      INTEGER TYPE_ELEM
      INTEGER TYPGEO
!
      SELECT CASE(TYPE_ELEM)
      CASE(EDGE_BND_ELT_TYPE)
        TYPGEO = MED_SEG2
      CASE(TRIANGLE_ELT_TYPE)
        TYPGEO = MED_TRIA3
      CASE(QUADRANGLE_ELT_TYPE)
        TYPGEO = MED_QUAD4
      CASE(TETRAHEDRON_ELT_TYPE)
        TYPGEO = MED_TETRA4
      CASE(PRISM_ELT_TYPE)
        TYPGEO = MED_PENTA6
      CASE DEFAULT
        IF(LNG.EQ.1) WRITE(LU,*) 'ERREUR : TYPE D ELEMENTS INCONNU'
        IF(LNG.EQ.2) WRITE(LU,*) 'ERROR: UNKNOWN TYPE OF ELEMENTS'
        CALL PLANTE(1)
      END SELECT

      END SUBROUTINE
#endif
      END MODULE
